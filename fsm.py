
import re, datetime, asyncio
from aiogram import Router, Bot
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from funcs import get_db_pool, update_data, add_action
from random import randint
from decimal import Decimal, getcontext
from conf import TOKEN, PCCLUB
from aiogram.fsm.state import State, StatesGroup


bot = Bot(token=TOKEN)

getcontext().prec = 50

fsm_router = Router()


class Network_search(StatesGroup):
    id = State()

class Network_edit(StatesGroup):
    name = State()
    desc = State()

class Games(StatesGroup):
    game1_bet = State()
    game1_amount = State()
    game2_bet = State()
    game2_amount = State()

class Network_mailing(StatesGroup):
    text = State()

class Mailing(StatesGroup):
    user = State()
    text = State()

class Reowner(StatesGroup):
    userid = State()

class Send_channel(StatesGroup):
    url = State()
    text = State()
    
class Rename(StatesGroup):
    name = State()


@fsm_router.message(Network_search.id)
async def Network_id(message: Message, state: FSMContext):
    await state.clear()
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Network_id')
        if message.text.isdigit():
            network = await conn.fetchrow('SELECT * FROM networks WHERE owner_id = $1', int(message.text))
        else:
            network = await conn.fetchrow('SELECT * FROM networks WHERE name = $1', message.text)
        if network is None:
            await message.answer('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚Ü™Ô∏è –í—Å—Ç—É–ø–∏—Ç—å', callback_data=f'network_join_{network[1]}_{message.from_user.id}')]
            ])
            status = ''
            if network[5] == 'open':
                status = '–û—Ç–∫—Ä—ã—Ç–∞—è'
            elif network[5] == 'close':
                status = '–ó–∞–∫—Ä—ã—Ç–∞—è'
            elif network[5] == 'request':
                status = '–ü–æ –∑–∞—è–≤–∫–µ'
            await message.answer(f'üåê –§—Ä–∞–Ω—à–∏–∑–∞ –Ω–∞–π–¥–µ–Ω–∞!\n–ù–∞–∑–≤–∞–Ω–∏–µ: {network[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {network[2]}\n–°—Ç–∞—Ç—É—Å: {status}', reply_markup=markup)


@fsm_router.message(Reowner.userid)
async def Reowner_userid(message: Message, state: FSMContext):
    await state.clear()
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Reowner_userid')
        if message.text.isdigit():
            foundUser = await conn.fetchval('SELECT userid FROM stats WHERE network = $1 AND userid = $2', message.from_user.id, int(message.from_user.id))
            if foundUser:
                await message.answer('üîÑÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑—É')
                await conn.execute('UPDATE networks SET admins = array_remove(admins, $1) WHERE owner_id = $2', int(message.text), message.from_user.id)
                await conn.execute('UPDATE networks SET owner_id = $1 WHERE owner_id = $2', int(message.text), message.from_user.id)
                await conn.execute('UPDATE stats SET network = $1 WHERE network = $2', int(message.text), message.from_user.id)
            else:
                await message.answer('‚ùå –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π —Ñ—Ä–∞–Ω—à–∏–∑–µ')
        else:
            await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID')


@fsm_router.message(Network_mailing.text)
async def Network_mailing_text(message: Message, state: FSMContext):
    await state.clear()
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Network_mailing_text')
        members = await conn.fetch('SELECT userid FROM stats WHERE network = $1 AND userid != $1', user[1])
        for member in members:
            try:
                await bot.send_message(member[0], f'üì• –í–∞–º –ø—Ä–∏—à–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã: {message.text}')
            except Exception:
                pass
        await conn.execute('UPDATE networks SET mailing = $1 WHERE owner_id = $2', datetime.datetime.today(), message.from_user.id)
        await message.answer('üì• –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ñ—Ä–∞–Ω—à–∏–∑—ã')


@fsm_router.message(Network_edit.name)
async def Network_name(message: Message, state: FSMContext):
    if len(message.text) <= 50:
        await state.clear()
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
            if user is None:
                await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
                return
            await update_data(message.from_user.username, message.from_user.id)
            await add_action(message.from_user.id, 'Network_name')
            if bool(re.fullmatch(r"[–∞-—è–ê-–Øa-zA-Z0-9 '\"]+", message.text)):
                name = await conn.fetchrow('SELECT * FROM networks WHERE name = $1', message.text)
                if name is None:
                    await conn.execute('UPDATE networks SET name = $1 WHERE owner_id = $2', message.text, user[1])
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{message.from_user.id}')]
                    ])
                    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã', reply_markup=markup)
                else:
                    await message.answer('‚ùå –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ')
            else:
                await message.answer('‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –∞ —Ç–∞–∫ –∂–µ —Ü–∏—Ñ—Ä—ã')
    else:
        await message.answer('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')


@fsm_router.message(Network_edit.desc)
async def Network_desc(message: Message, state: FSMContext):
    if len(message.text) <= 500:
        await state.clear()
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
            if user is None:
                await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
                return
            await update_data(message.from_user.username, message.from_user.id)
            await add_action(message.from_user.id, 'Network_desc')
            await conn.execute('UPDATE networks SET description = $1 WHERE owner_id = $2', message.text, user[1])
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{message.from_user.id}')]
            ])
            await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã', reply_markup=markup)
    else:
        await message.answer('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')


@fsm_router.message(Games.game1_bet)
async def Game1_bet(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Game1_bet')
        if message.text.lower() in ["–æ—Ä–µ–ª", '—Ä–µ—à–∫–∞', '–æ—Ä—ë–ª']:
            await state.update_data(bet=message.text.lower().replace('—ë', '–µ'))
            await state.set_state(Games.game1_amount)
            await message.answer('‚ùì –°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥?\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 5000) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
        else:
            await message.answer('‚ö†Ô∏è –°—Ç–∞–≤–∫–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞')


@fsm_router.message(Games.game1_amount)
async def Game1_amount(message: Message, state: FSMContext):
    await state.clear()
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, bal FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Game1_amount')
        if message.text.isdigit():
            if int(message.text) >= 5000:
                if int(message.text) <= user[1]:
                    value = randint(1, 100)
                    if value <= 49:
                        await conn.execute('UPDATE stats SET bal = bal + $1 WHERE userid = $2', int(message.text), message.from_user.id)
                        await message.answer(f'üéä –í—ã —É–≥–∞–¥–∞–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {int(message.text)*2}$')
                    else:
                        await conn.execute('UPDATE stats SET bal = bal - $1 WHERE userid = $2', int(message.text), message.from_user.id)
                        await message.answer(f'üí• –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –∏ —Ç–µ—Ä—è–µ—Ç–µ {message.text}$')
                else:
                    await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç $')
            else:
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 5000$')
        else:
            await message.answer('‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞')


@fsm_router.message(Games.game2_bet)
async def Game2_bet(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Game2_bet')
        if message.text.isdigit() and int(message.text) in [1, 2, 3, 4, 5, 6]:
            await state.update_data(bet=int(message.text))
            await state.set_state(Games.game2_amount)
            await message.answer('‚ùì –°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω–µ–≥?\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 5000) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
        else:
            await message.answer('‚ö†Ô∏è –°—Ç–∞–≤–∫–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6')


@fsm_router.message(Games.game2_amount)
async def Game2_amount(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, bal FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Game2_amount')
        if message.text.isdigit():
            if int(message.text) >= 5000:
                if int(message.text) <= user[1]:
                    sent_dice = await message.answer_dice(emoji='üé≤')
                    await asyncio.sleep(3)
                    data = await state.get_data()
                    if sent_dice.dice.value == data.get('bet'):
                        await conn.execute('UPDATE stats SET bal = bal + $1 WHERE userid = $2', int(message.text)*5, message.from_user.id)
                        await message.answer(f'üéä –í—ã —É–≥–∞–¥–∞–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {int(message.text)*6}$')
                    else:
                        await conn.execute('UPDATE stats SET bal = bal - $1 WHERE userid = $2', int(message.text), message.from_user.id)
                        await message.answer(f'üí• –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –∏ —Ç–µ—Ä—è–µ—Ç–µ {message.text}$')
                else:
                    await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç $')
            else:
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 5000$')
        else:
            await message.answer('‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞')
    await state.clear()


@fsm_router.message(Mailing.user)
async def Mailing_user(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Mailing_user')
        if not message.text.isdigit():
            await message.answer('‚ö†Ô∏è –í –∞–π–¥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
            return
        user = await conn.fetchval('SELECT userid FROM stats WHERE userid = $1', int(message.text))
        if user != None:
            await state.update_data(user=int(message.text))
            await message.answer('‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
            await state.set_state(Mailing.text)
            return
        await message.answer('‚ùå –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')


@fsm_router.message(Mailing.text)
async def Mailing_text(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Mailing_text')
        if len(message.text) > 500:
            await message.answer('‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            data = await state.get_data()
            chat = await conn.fetchval('SELECT chat_id FROM chats WHERE users @> ARRAY[$1::bigint, $2::bigint]', message.from_user.id, data.get('user'))
            try:
                if chat == None:
                    chat = randint(1, 9223372036854775807)
                    await conn.execute('INSERT INTO chats (chat_id, users) VALUES ($1, $2)', chat, [message.from_user.id, data.get('user')])
                await conn.execute('INSERT INTO messages (msg_text, user_from, chat_id) VALUES ($1, $2, $3)', message.text, message.from_user.id, chat)
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚úâÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'chat_{chat}_1_{data.get("user")}')]
                ])
                await bot.send_message(data.get('user'), 'üì´ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=markup)
                await message.answer('‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            except Exception:
                await message.answer('‚ùå –≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        await state.clear()


@fsm_router.message(Send_channel.url)
async def Send_channel_url(message: Message, state: FSMContext):
    await state.update_data(url=message.text)
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç\n–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
    await state.set_state(Send_channel.text)


@fsm_router.message(Send_channel.text)
async def Send_channel_text(message: Message, state: FSMContext):
    data = await state.get_data()
    data = data.get('url')
    text = message.text.replace('_', f'\\_')
    text = text.replace('–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', f'[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏]({data})')
    await bot.send_message(PCCLUB, text, disable_web_page_preview=True, parse_mode='markdown')
    await state.clear()


@fsm_router.message(Rename.name)
async def Rename_name(message: Message, state: FSMContext):
    await state.clear()
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, premium FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'Rename_name')
        if user[1] < datetime.datetime.today():
            if len(message.text) <= 15:
                if bool(re.fullmatch(r"[–∞-—è–ê-–Øa-zA-Z0-9 '\"]+", message.text)):
                    name = await conn.fetchrow('SELECT * FROM stats WHERE name = $1', message.text)
                    if name is None:
                        await conn.execute('UPDATE stats SET name = $1 WHERE userid = $2', message.text, message.from_user.id)
                        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º')
                    else: 
                        await message.answer('‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç')
                else:
                    await message.answer('‚ö†Ô∏è –ë–µ–∑ PREMIUM –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, –∞ —Ç–∞–∫ –∂–µ —Ü–∏—Ñ—Ä—ã')
            else:
                await message.answer('‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ 15 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            if len(message.text) <= 30:
                name = await conn.fetchrow('SELECT * FROM stats WHERE name = $1', message.text)
                if name is None:
                    await conn.execute('UPDATE stats SET name = $1 WHERE userid = $2', message.text, message.from_user.id)
                    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º')
                else:
                    await message.answer('‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç')
            else:
                await message.answer('‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ 30 —Å–∏–º–≤–æ–ª–æ–≤')
