
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from funcs import get_db_pool, update_data, add_action
from aiogram import Bot, Router, F
from conf import TOKEN


bot = Bot(token=TOKEN)

cmd_franchise_router = Router()


@cmd_franchise_router.message(F.text == 'üåê –§—Ä–∞–Ω—à–∏–∑—ã')
async def msg_franchise(message: Message):
    await cmd_franchise(message)


@cmd_franchise_router.message(Command('allow_user'))
async def cmd_allow_user(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_allow_user')
        admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', user[1])
        requests = await conn.fetchval('SELECT requests FROM networks WHERE owner_id = $1', user[1])
        if user[1] != None:
            if int(message.text[12:]) in requests:
                if message.from_user.id in admins or message.from_user.id == user[1]:
                    net_user = await conn.fetchval('SELECT network FROM stats WHERE userid = $1', int(message.text[12:]))
                    if net_user == None:
                        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É')
                        await bot.send_message(message.text[12:], 'üéä –í—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ —Ñ—Ä–∞–Ω—à–∏–∑—É')
                        await conn.execute('UPDATE stats SET network = $1 WHERE userid = $2', message.from_user.id, int(message.text[12:]))
                        await conn.execute('UPDATE networks SET requests = array_remove(requests, $1) WHERE owner_id = $2', int(message.text[12:]), message.from_user.id)
                    else:
                        await message.answer('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ñ—Ä–∞–Ω—à–∏–∑–µ')
                else:
                    await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            else:
                await message.answer('‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É –≤ –≤–∞—à—É —Ñ—Ä–∞–Ω—à–∏–∑—É')
        else:
            await message.answer('‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')


@cmd_franchise_router.message(Command('set_admin'))
async def cmd_set_admin(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_set_admin')
        if int(message.text[11:]) == message.from_user.id:
            await message.answer('‚ö†Ô∏è –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
        else:
            user = await conn.fetchval('SELECT userid FROM stats WHERE userid = $1 AND network = $2', int(message.text[11:]), message.from_user.id)
            if user != None:
                await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∫–ª—É–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
                await conn.execute('UPDATE networks SET admins = array_append(admins, $1) WHERE owner_id = $2', int(message.text[11:]), message.from_user.id)
            else:
                await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–µ–π')


@cmd_franchise_router.message(Command('delete_admin'))
async def cmd_delete_admin(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_delete_admin')
        if int(message.text[13:]) == message.from_user.id:
            await message.answer('‚ö†Ô∏è –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Å–µ–±—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        else:
            user = await conn.fetchval('SELECT userid FROM stats WHERE userid = $1 AND network = $2', int(message.text[13:]), message.from_user.id)
            if user != None:
                await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –∫–ª—É–± —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
                await conn.execute('UPDATE networks SET admins = array_remove(admins, $1) WHERE owner_id = $2', int(message.text[13:]), message.from_user.id)
            else:
                await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–µ–π')


@cmd_franchise_router.message(Command('delete_user'))
async def cmd_delete_user(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_delete_user')
        if int(message.text[13:]) == message.from_user.id:
            await message.answer('‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è')
        else:
            admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', user[1])
            user = await conn.fetchval('SELECT userid FROM stats WHERE userid = $1 AND network = $2', int(message.text[13:]), user[1])
            if int(message.text[13:]) == user[1]:
                await message.answer('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞')
            elif message.from_user.id in admins and int(message.text[13:]) in admins:
                await message.answer('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
            elif user != None:
                if message.from_user.id == user[1] or message.from_user.id in admins:
                    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–∏–ª–∏ –∫–ª—É–± –∏–∑ —Ñ—Ä–∞–Ω—à–∏–∑—ã')
                    await bot.send_message(message.text[13:], 'ü´∑ –í–∞—à –∫–ª—É–± –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ñ—Ä–∞–Ω—à–∏–∑—ã')
                    await conn.execute('UPDATE stats SET network = $1 WHERE userid = $2', None, int(message.text[13:]))
                    if int(message.text[13:]) in admins:
                        await conn.execute('UPDATE networks SET admins = array_remove(admins, $1) WHERE owner_id = $2', int(message.text[13:]), user[1])
                else:
                    await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            else:
                await message.answer('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')


@cmd_franchise_router.message(Command('ban_user'))
async def cmd_ban_user(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_ban_user')
        if int(message.text[9:]) == message.from_user.id:
            await message.answer('‚ö†Ô∏è –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è')
        else:
            admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', user[1])
            user = await conn.fetchval('SELECT userid FROM stats WHERE userid = $1 AND network = $2', int(message.text[9:]), user[1])
            if int(message.text[9:]) == user[1]:
                await message.answer('‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞')
            elif message.from_user.id in admins and int(message.text[9:]) in admins:
                await message.answer('‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
            elif user != None:
                if message.from_user.id == user[1] or message.from_user.id in admins:
                    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ—Ä–∞–Ω—à–∏–∑–µ —ç—Ç–æ–º—É –∫–ª—É–±—É')
                    await conn.execute('UPDATE stats SET network = $1 WHERE userid = $2', None, int(message.text[9:]))
                    await conn.execute('UPDATE networks SET ban_users = array_append(ban_users, $1) WHERE owner_id = $2', int(message.text[9:]), user[1])
                    if int(message.text[13:]) in admins:
                        await conn.execute('UPDATE networks SET admins = array_remove(admins, $1) WHERE owner_id = $2', int(message.text[13:]), user[1])
                else:
                    await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            else:
                await message.answer('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')


@cmd_franchise_router.message(Command('reban_user'))
async def cmd_reban_user(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_reban_user')
        if int(message.text[11:]) == message.from_user.id:
            await message.answer('‚ö†Ô∏è –ù–µ–ª—å–∑—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Å–µ–±—è')
        else:
            admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', user[1])
            user = await conn.fetchval('SELECT userid FROM stats WHERE userid = $1', int(message.text[11:]))
            if int(message.text[11:]) == user[1]:
                await message.answer('‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞')
            if message.from_user.id in admins and int(message.text[13:]) in admins:
                await message.answer('‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
            if user != None:
                if message.from_user.id == user[1] or message.from_user.id in admins:
                    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ—Ä–∞–Ω—à–∏–∑–µ —ç—Ç–æ–º—É –∫–ª—É–±—É')
                    await conn.execute('UPDATE networks SET ban_users = array_remove(ban_users, $1) WHERE owner_id = $2', user, user[1])
                else:
                    await message.answer('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
            else:
                await message.answer('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')


@cmd_franchise_router.message(Command('franchise'))
async def cmd_franchise(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_franchise')
        if user[1] is None:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_create_{message.from_user.id}')],
                [InlineKeyboardButton(text='ü§ù –í—Å—Ç—É–ø–∏—Ç—å –≤ —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_search_{message.from_user.id}')]
            ])
            await message.answer('üåê –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ', reply_markup=markup)
        else:
            network = await conn.fetchrow('SELECT name, owner_id, description, income, type, admins FROM networks WHERE owner_id = $1', user[1])
            if network[4] == 'request':
                markup1 = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_edit_{message.from_user.id}')],
                    [InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'network_members_1_{message.from_user.id}')],
                    [InlineKeyboardButton(text='üì´ –ó–∞—è–≤–∫–∏', callback_data=f'network_requests_{message.from_user.id}')],
                    [InlineKeyboardButton(text='üì§ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'network_mailing_{message.from_user.id}')]
                ])
            else:
                markup1 = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_edit_{message.from_user.id}')],
                    [InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'network_members_1_{message.from_user.id}')],
                    [InlineKeyboardButton(text='üì§ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'network_mailing_{message.from_user.id}')]
                ])
            if network[1] == message.from_user.id:
                markup1.inline_keyboard.extend([[InlineKeyboardButton(text='üîÑÔ∏è –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_owner_{message.from_user.id}')],
                                               [InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_delete_{message.from_user.id}')]])
            else:
                markup1.inline_keyboard.append([InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_left_{message.from_user.id}')])
            net_type = ''
            if network[4] == 'open':
                net_type = '–û—Ç–∫—Ä—ã—Ç–∞—è'
            elif network[4] == 'close':
                net_type = '–ó–∞–∫—Ä—ã—Ç–∞—è'
            elif network[4] == 'request':
                net_type = '–ü–æ –∑–∞—è–≤–∫–µ'
            markup2 = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_left_{message.from_user.id}')]
            ])
            members = await conn.fetchval('SELECT COUNT(*) FROM stats WHERE network = $1', network[1])
            admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', network[1])
            if network[1] == message.from_user.id or message.from_user.id in admins:
                await message.answer(f'üåê –§—Ä–∞–Ω—à–∏–∑–∞ {network[0]}\n\nüÜî ID: {network[1]}\nüí≠ –û–ø–∏—Å–∞–Ω–∏–µ: {network[2]}\nüîò –°—Ç–∞—Ç—É—Å: {net_type}\n\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}\n\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {network[3]}$\nüèÜ –¢–æ–ø —Ñ—Ä–∞–Ω—à–∏–∑—ã: /franchise_info', reply_markup=markup1)
            else:
                await message.answer(f'üåê –§—Ä–∞–Ω—à–∏–∑–∞ {network[0]}\n\nüÜî ID: {network[1]}\nüí≠ –û–ø–∏—Å–∞–Ω–∏–µ: {network[2]}\nüîò –°—Ç–∞—Ç—É—Å: {net_type}\n\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}\n\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {network[3]}$\nüèÜ –¢–æ–ø —Ñ—Ä–∞–Ω—à–∏–∑—ã: /franchise_info', reply_markup=markup2)


@cmd_franchise_router.message(Command('franchise_info'))
async def cmd_franchise_info(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, network FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_franchise_info')
        info = await conn.fetch('SELECT name, net_inc FROM stats WHERE network = $1 ORDER BY net_inc DESC LIMIT 10', user[1])
        text = 'üí∏ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ —Ç–≤–æ–µ–π —Ñ—Ä–∞–Ω—à–∏–∑—ã –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º $ –∑–∞ –Ω–µ–¥–µ–ª—é:'
        num = 1
        for user in info:
            text += f'\n{num}) {user[0]} - {user[1]}$'
            num += 1
        await message.answer(text)
