
import datetime
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F
from funcs import get_db_pool, update_data, add_action
from aiogram.fsm.context import FSMContext
from fsm import Network_edit, Network_mailing, Network_search, Reowner
from math import ceil


cb_network_router = Router()


@cb_network_router.callback_query(F.data.startswith('network_members'))
async def cb_network_members(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_members')
        members = await conn.fetch('SELECT name, userid, net_inc FROM stats WHERE network = $1 ORDER BY net_inc DESC', user[1])
        num = int(callback.data.split('_')[-2])
        text = 'üë• –í—Å–µ –∫–ª—É–±—ã-—É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ñ—Ä–∞–Ω—à–∏–∑—ã'
        number = 1
        admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', user[1])
        for user in members[5*(num-1):5*(num)]:
            text += f'\n{number}. <a href="tg://user?id={user[1]}">{user[0]}</a> ID: {user[1]} –î–æ—Ö–æ–¥: {user[2]}$'
            if user[1] in admins:
                text += ' (–∞–¥–º–∏–Ω.)'
            elif user[1] == user[1]:
                text += ' (–≤–ª–∞–¥–µ–ª–µ—Ü)'
            number += 1
            if len(members) < 4:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f'{num}', callback_data=f'{num}')],
                    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{callback.from_user.id}')]
                ])
            elif num == 1:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f'{num}', callback_data=f'{num}'),
                     InlineKeyboardButton(text=f'‚û°Ô∏è', callback_data=f'network_members_{num+1}_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{callback.from_user.id}')]
                ])
            elif num >= ceil(len(members)/5):
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f'‚¨ÖÔ∏è', callback_data=f'network_members_{num-1}_{callback.from_user.id}'),
                     InlineKeyboardButton(text=f'{num}', callback_data=f'{num}')],
                    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{callback.from_user.id}')]
                ])
            else:
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f'‚¨ÖÔ∏è', callback_data=f'network_members_{num-1}_{callback.from_user.id}'),
                     InlineKeyboardButton(text=f'{num}', callback_data=f'{num}'),
                     InlineKeyboardButton(text=f'‚û°Ô∏è', callback_data=f'network_members_{num+1}_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{callback.from_user.id}')]
                ])
        text += '\n\n‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'
        text += '\n–ò—Å–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ - /delete_user'
        text += '\n–ó–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞ /ban_user'
        text += '\n–†–∞–∑–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞ /reban_user'
        if callback.from_user.id == user[1]:
            text += '\n–í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É /set_admin'
            text += '\n–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∫—É /delete_admin'
        text += '\n‚ÄºÔ∏è –ö–æ–º–∞–Ω–¥—ã –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/(–∫–æ–º–∞–Ω–¥–∞) (id –∏–≥—Ä–æ–∫–∞)'
        await callback.message.edit_text(text, parse_mode='HTML', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_requests'))
async def cb_network_requests(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_requests')
        requests = await conn.fetchval('SELECT requests FROM networks WHERE owner_id = $1', callback.from_user.id)
        text = 'üì´ –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Ö–æ–¥:'
        num = 1
        for user in requests:
            text += f'\n{num}. <a href="tg://user?id={user}">{user}</a>'
            num += 1
        text += '\n‚úÖ –ü—Ä–∏–Ω—è—Ç—å: /allow_user (id –∏–≥—Ä–æ–∫–∞*)'
        await callback.message.edit_text(text, parse_mode='HTML')


@cb_network_router.callback_query(F.data.startswith('network_edit_name'))
async def cb_network_edit_name(callback: CallbackQuery, state: FSMContext):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_edit_name')
        await callback.message.edit_text('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–∞–Ω—à–∏–∑—ã\n–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
        await state.set_state(Network_edit.name)


@cb_network_router.callback_query(F.data.startswith('network_edit_description'))
async def cb_network_edit_description(callback: CallbackQuery, state: FSMContext):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_edit_description')
        await callback.message.edit_text('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–∞–Ω—à–∏–∑—ã\n–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
        await state.set_state(Network_edit.desc)


@cb_network_router.callback_query(F.data.startswith('network_type'))
async def cb_network_type(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_type')
        net_type = callback.data.split('_')[-2]
        if net_type == 'open':
            net_type2 = '–û—Ç–∫—Ä—ã—Ç–∞—è'
        elif net_type == 'close':
            net_type2 = '–ó–∞–∫—Ä—ã—Ç–∞—è'
        elif net_type == 'request':
            net_type2 = '–ü–æ –∑–∞—è–≤–∫–µ'
        await conn.execute('UPDATE networks SET type = $1 WHERE owner_id = $2', net_type, user[1])
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{callback.from_user.id}')]
        ])
        await callback.message.edit_text(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ñ—Ä–∞–Ω—à–∏–∑—ã –Ω–∞ "{net_type2}"', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_edit_type'))
async def cb_network_edit_type(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_edit_type')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîì –û—Ç–∫—Ä—ã—Ç–∞—è', callback_data=f'network_type_open_{callback.from_user.id}')],
            [InlineKeyboardButton(text='üîí –ó–∞–∫—Ä—ã—Ç–∞—è', callback_data=f'network_type_close_{callback.from_user.id}')],
            [InlineKeyboardButton(text='‚úâÔ∏è –ü–æ –∑–∞—è–≤–∫–µ', callback_data=f'network_type_request_{callback.from_user.id}')]
        ])
        await callback.message.edit_text('‚ùì –ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å —Ñ—Ä–∞–Ω—à–∏–∑—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_mailing'))
async def cb_network_mailing(callback: CallbackQuery, state: FSMContext):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_mailing')
        network = await conn.fetchrow('SELECT admins, mailing FROM networks WHERE owner_id = $1', userid[1])
        if callback.from_user.id in network[0] or callback.from_user.id == userid[1]:
            if network[1] + datetime.timedelta(hours=1) <= datetime.datetime.today():
                await callback.message.edit_text('‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
                await state.set_state(Network_mailing.text)
            else:
                await callback.message.edit_text('‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å')
        else:
            await callback.message.edit_text('‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã')


@cb_network_router.callback_query(F.data.startswith('network_edit'))
async def cb_network_edit(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_edit')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='ü™ß –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'network_edit_name_{callback.from_user.id}')],
            [InlineKeyboardButton(text='üí¨ –û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'network_edit_description_{callback.from_user.id}')],
            [InlineKeyboardButton(text='üîò –°—Ç–∞—Ç—É—Å', callback_data=f'network_edit_type_{callback.from_user.id}')],
            [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'network_{callback.from_user.id}')]
        ])
        await callback.message.edit_text('‚ùì –ß—Ç–æ –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å?', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_delete_success'))
async def cb_network_delete_success(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_delete_success')
        await conn.execute('DELETE FROM networks WHERE owner_id = $1', callback.from_user.id)
        users = await conn.fetch('SELECT userid FROM stats WHERE network = $1', callback.from_user.id)
        if len(users) > 1:
            for user in users:
                await conn.execute('UPDATE stats SET network = $1, net_inc = $2 WHERE userid = $3', None, 0, user[0])
        else:
            await conn.execute('UPDATE stats SET network = $1, net_inc = $2 WHERE userid = $3', None, 0, callback.from_user.id)
        await callback.message.edit_text('‚úÖ –§—Ä–∞–Ω—à–∏–∑–∞ —É–¥–∞–ª–µ–Ω–∞!')


@cb_network_router.callback_query(F.data.startswith('network_delete'))
async def cb_network_delete(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_delete')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –î–∞.', callback_data=f'network_delete_success_{callback.from_user.id}')],
            [InlineKeyboardButton(text='‚ùå –ù–ï–¢!', callback_data=f'cancel_{callback.from_user.id}')]
        ])
        await callback.message.edit_text('‚ÄºÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_left_success'))
async def cb_network_left_success(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, net_inc, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_left_success')
        income = await conn.fetchval('SELECT income FROM networks WHERE owner_id = $1', user[2])
        await conn.execute('UPDATE stats SET network = NULL, net_inc = 0 WHERE userid = $2', callback.from_user.id)
        await conn.execute('UPDATE networks SET income = $1 WHERE owner_id = $2', income-user[1], callback.from_user.id)
        await callback.message.edit_text('‚Ü©Ô∏è –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ñ—Ä–∞–Ω—à–∏–∑—É!')


@cb_network_router.callback_query(F.data.startswith('network_left'))
async def cb_network_left(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_left')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –î–∞.', callback_data=f'network_left_success_{callback.from_user.id}')],
            [InlineKeyboardButton(text='‚ùå –ù–ï–¢!', callback_data=f'cancel_{callback.from_user.id}')]
        ])
        await callback.message.edit_text('‚ÄºÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_create'))
async def cb_network_create(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_create')
        if user[1] is None:
            await conn.execute('INSERT INTO networks (owner_id) VALUES ($1)', callback.from_user.id)
            await conn.execute('UPDATE stats SET network = $1 WHERE userid = $2', callback.from_user.id, callback.from_user.id)
            await callback.message.edit_text('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Ñ—Ä–∞–Ω—à–∏–∑—É')
        else:
            await callback.message.edit_text('ü´∏ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')


@cb_network_router.callback_query(F.data.startswith('network_search_id'))
async def cb_network_search_id(callback: CallbackQuery, state: FSMContext):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_search_id')
        if user[1] is None:
            await callback.message.edit_text('üÜî –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å\n–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
            await state.set_state(Network_search.id)
        else:
            await callback.message.edit_text('ü´∏ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')
    
    
@cb_network_router.callback_query(F.data.startswith('network_search_num_'))
async def cb_network_search_num(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_search_num')
        if user[1] is None:
            franchises = await conn.fetch('SELECT owner_id, name, description, income FROM networks WHERE type != $1 ORDER BY income DESC', 'close')
            if len(franchises) != 0:
                num = int(callback.data.split('_')[-2])
                text = f'–§—Ä–∞–Ω—à–∏–∑–∞ {franchises[num-1][1]}\n\n'
                text += f'–û–ø–∏—Å–∞–Ω–∏–µ: {franchises[num-1][2]}\n'
                text += f'–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {franchises[num-1][3]}'
                if len(franchises) == 1:
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f'{num}', callback_data=f'{num}')],
                        [InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å', callback_data=f'network_join_{franchises[num-1][0]}_{callback.from_user.id}')]
                    ])
                elif num == 1:
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f'{num}', callback_data=f'{num}'),
                         InlineKeyboardButton(text=f'‚û°Ô∏è', callback_data=f'network_search_num_{num+1}_{callback.from_user.id}')],
                        [InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å', callback_data=f'network_join_{franchises[num-1][0]}_{callback.from_user.id}')]
                    ])
                elif num == len(franchises):
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f'‚¨ÖÔ∏è', callback_data=f'network_search_num_{num-1}_{callback.from_user.id}'),
                         InlineKeyboardButton(text=f'{num}', callback_data=f'{num}')],
                        [InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å', callback_data=f'network_join_{franchises[num-1][0]}_{callback.from_user.id}')]
                    ])
                else:
                    markup = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f'‚¨ÖÔ∏è', callback_data=f'network_search_num_{num-1}_{callback.from_user.id}'),
                         InlineKeyboardButton(text=f'{num}', callback_data=f'{num}'),
                         InlineKeyboardButton(text=f'‚û°Ô∏è', callback_data=f'network_search_num_{num+1}_{callback.from_user.id}')],
                        [InlineKeyboardButton(text='–í—Å—Ç—É–ø–∏—Ç—å', callback_data=f'network_join_{franchises[num-1][0]}_{callback.from_user.id}')]
                    ])
                await callback.message.edit_text(text, reply_markup=markup)
            else:
                await callback.message.edit_text('‚ö†Ô∏è –§—Ä–∞–Ω—à–∏–∑ –ø–æ–∫–∞ –Ω–µ—Ç, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é')
        else:
            await callback.message.edit_text('ü´∏ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')


@cb_network_router.callback_query(F.data.startswith('network_owner'))
async def cb_network_owner(callback: CallbackQuery, state: FSMContext):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_owner')
        await callback.message.answer('üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ñ—Ä–∞–Ω—à–∏–∑—ã –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
        await state.set_state(Reowner.userid)


@cb_network_router.callback_query(F.data.startswith('network_search_'))
async def cb_network_search(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_search')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–Ω—à–∏–∑—ã', callback_data=f'network_search_num_1_{callback.from_user.id}')],
            [InlineKeyboardButton(text=f'üîç –ü–æ–∏—Å–∫ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data=f'network_search_id_{callback.from_user.id}')],
        ])
        await callback.message.edit_text('‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–Ω—à–∏–∑—ã:', reply_markup=markup)


@cb_network_router.callback_query(F.data.startswith('network_join'))
async def cb_network_join(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network_join')
        data = callback.data.split('_')
        if user[1] is None:
            info = await conn.fetchrow('SELECT type, requests, ban_users FROM networks WHERE owner_id = $1', int(data[2]))
            if not callback.from_user.id in info[2]:
                if info[0] == 'open':
                    await conn.execute('UPDATE stats SET network = $1 WHERE userid = $2', int(data[2]), callback.from_user.id)
                    await callback.message.edit_text('ü§ù –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ñ—Ä–∞–Ω—à–∏–∑–µ!')
                elif info[0] == 'close':
                    await callback.message.edit_text('üîí –≠—Ç–∞ —Ñ—Ä–∞–Ω—à–∏–∑–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π!')
                elif info[0] == 'request':
                    await conn.execute('UPDATE networks SET requests = array_append(requests, $1)', callback.from_user.id)
                    await callback.message.edit_text('üì® –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!')
            else:
                await callback.message.edit_text('üòî –í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —ç—Ç–æ–π —Ñ—Ä–∞–Ω—à–∏–∑—ã, –∏ –ø–æ —ç—Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ –≤ –Ω–µ–µ –≤—Å—Ç—É–ø–∏—Ç—å')
        else:
            await callback.message.edit_text('ü´∏ –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ')


@cb_network_router.callback_query(F.data.startswith('network'))
async def cb_network(callback: CallbackQuery):
    pool = await get_db_pool()
    userid = callback.data.split('_')[-1]
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT userid, network FROM stats WHERE userid = $1', callback.from_user.id)
        if user == None or user[0] != int(userid):
            await callback.answer('‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', show_alert=True)
            return
        await update_data(callback.from_user.username, callback.from_user.id)
        await add_action(callback.from_user.id, 'cb_network')
        if user[1] is None:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_create_{callback.from_user.id}')],
                [InlineKeyboardButton(text='ü§ù –í—Å—Ç—É–ø–∏—Ç—å –≤ —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_search_{callback.from_user.id}')]
            ])
            await callback.message.edit_text('üåê –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ', reply_markup=markup)
        else:
            network = await conn.fetchrow('SELECT name, owner_id, description, income, type, admins FROM networks WHERE owner_id = $1', user[1])
            if network[4] == 'request':
                markup1 = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_edit_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'network_members_1_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üì´ –ó–∞—è–≤–∫–∏', callback_data=f'network_requests_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üì§ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'network_mailing_{callback.from_user.id}')]
                ])
            else:
                markup1 = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_edit_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'network_members_1_{callback.from_user.id}')],
                    [InlineKeyboardButton(text='üì§ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=f'network_mailing_{callback.from_user.id}')]
                ])
            if network[1] == callback.from_user.id:
                markup1.inline_keyboard.extend([[InlineKeyboardButton(text='üîÑÔ∏è –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_owner_{callback.from_user.id}')],
                                                [InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_delete_{callback.from_user.id}')]])
            else:
                markup1.inline_keyboard.append([InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_left_{callback.from_user.id}')])
            net_type = ''
            if network[4] == 'open':
                net_type = '–û—Ç–∫—Ä—ã—Ç–∞—è'
            elif network[4] == 'close':
                net_type = '–ó–∞–∫—Ä—ã—Ç–∞—è'
            elif network[4] == 'request':
                net_type = '–ü–æ –∑–∞—è–≤–∫–µ'
            markup2 = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ü–æ–∫–∏–Ω—É—Ç—å —Ñ—Ä–∞–Ω—à–∏–∑—É', callback_data=f'network_left_{callback.from_user.id}')]
            ])
            members = await conn.fetchval('SELECT COUNT(*) FROM stats WHERE network = $1', network[1])
            admins = await conn.fetchval('SELECT admins FROM networks WHERE owner_id = $1', network[1])
            if network[1] == callback.from_user.id or callback.from_user.id in admins:
                await callback.message.edit_text(f'üåê –§—Ä–∞–Ω—à–∏–∑–∞ {network[0]}\n\nüÜî ID: {network[1]}\nüí≠ –û–ø–∏—Å–∞–Ω–∏–µ: {network[2]}\nüîò –°—Ç–∞—Ç—É—Å: {net_type}\n\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}\n\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {network[3]}$\nüèÜ –¢–æ–ø —Ñ—Ä–∞–Ω—à–∏–∑—ã: /franchise_info', reply_markup=markup1)
            else:
                await callback.message.edit_text(f'üåê –§—Ä–∞–Ω—à–∏–∑–∞ {network[0]}\n\nüÜî ID: {network[1]}\nüí≠ –û–ø–∏—Å–∞–Ω–∏–µ: {network[2]}\nüîò –°—Ç–∞—Ç—É—Å: {net_type}\n\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—É–±–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}\n\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {network[3]}$\nüèÜ –¢–æ–ø —Ñ—Ä–∞–Ω—à–∏–∑—ã: /franchise_info', reply_markup=markup2)
