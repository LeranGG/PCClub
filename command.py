
import datetime
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram import Router, Bot, F
from conf import ADMIN, TOKEN
from decimal import Decimal, getcontext
from funcs import get_db_pool, update_data, add_action
from test import prices, taxes, ads
from aiogram.fsm.context import FSMContext
from fsm import Rename

bot = Bot(token=TOKEN)

getcontext().prec = 50

commands_router = Router()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üñ• –ü–ö –≤ –Ω–∞–ª–∏—á–∏–∏'), KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å')],
        [KeyboardButton(text='üåê –§—Ä–∞–Ω—à–∏–∑—ã'), KeyboardButton(text='üõí –ú–∞–≥–∞–∑–∏–Ω')],
        [KeyboardButton(text='üéÆ –ò–≥—Ä—ã'), KeyboardButton(text='üèÜ –¢–æ–ø')],
        [KeyboardButton(text='üì´ –ß–∞—Ç—ã')],
        [KeyboardButton(text='üëë –î–æ–Ω–∞—Ç')]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)


@commands_router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def msg_profile(message: Message):
    await cmd_profile(message)

@commands_router.message(F.text == 'üñ• –ü–ö –≤ –Ω–∞–ª–∏—á–∏–∏')
async def msg_my_pcs(message: Message):
    await cmd_my_pcs(message)

@commands_router.message(F.text == 'üèÜ –¢–æ–ø')
async def msg_top(message: Message):
    await cmd_top(message)

@commands_router.message(F.text == 'üëë –î–æ–Ω–∞—Ç')
async def msg_donate(message: Message):
    await cmd_donate(message)

@commands_router.message(F.text == 'üì´ –ß–∞—Ç—ã')
async def msg_chats(message: Message):
    await cmd_chats(message)


@commands_router.message(CommandStart())
async def cmd_start(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await conn.execute('INSERT INTO stats (userid, username) VALUES ($1, $2)', message.from_user.id, message.from_user.username)
            if len(message.text) > 6:
                if message.text[7:] == '-1001680896621':
                    await bot.send_message(ADMIN[0], f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.first_name}](tg://user?id={message.from_user.id}) @{message.from_user.username} –æ—Ç Arizona HOT', parse_mode='markdown')
                elif int(message.text[7:]) == ADMIN[0]:
                    await conn.execute('UPDATE stats SET premium = $1 WHERE userid = $2', datetime.datetime.today() + datetime.timedelta(days=14), message.from_user.id)
                    await bot.send_message(ADMIN[0], f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.first_name}](tg://user?id={message.from_user.id}) @{message.from_user.username} –æ—Ç —Ç–µ–±—è)', parse_mode='markdown')
                else:
                    await bot.send_message(ADMIN[0], f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.first_name}](tg://user?id={message.from_user.id}) @{message.from_user.username} –æ—Ç [{message.text[7:]}](tg://user?id={message.text[7:]})', parse_mode='markdown')
                await conn.execute('UPDATE stats SET ref = $1 WHERE userid = $2', int(message.text[7:]), message.from_user.id)
                await conn.execute('UPDATE stats SET tickets = tickets + 1 WHERE userid = $1', int(message.text[7:]))
            else:
                await bot.send_message(ADMIN[0], f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{message.from_user.first_name}](tg://user?id={message.from_user.id}) @{message.from_user.username}', parse_mode='markdown')
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_start')
        if message.chat.id == message.from_user.id:
            await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üñê\n\n'
                                 '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ü–ö –∫–ª—É–±–∞!\n'
                                 '–ü—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É, –ø–æ–∫—É–ø–∞–π –¥–ª—è –Ω–µ—ë –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–∏–º –≤ —Å–≤–æ—ë–º –¥–µ–ª–µ üëë\n'
                                 '–ë—ã—Å—Ç—Ä–µ–µ –∏–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω (/shop) –∏ –ø–æ–∫—É–ø–∞–π —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —É–∂–µ —Å–µ–π—á–∞—Å! üî•', reply_markup=keyboard)
        else:
            await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üñê\n\n'
                                 '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ü–ö –∫–ª—É–±–∞!\n'
                                 '–ü—Ä–æ–∫–∞—á–∏–≤–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É, –ø–æ–∫—É–ø–∞–π –¥–ª—è –Ω–µ—ë –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–∏–º –≤ —Å–≤–æ—ë–º –¥–µ–ª–µ üëë\n'
                                 '–ë—ã—Å—Ç—Ä–µ–µ –∏–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω (/shop) –∏ –ø–æ–∫—É–ø–∞–π —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —É–∂–µ —Å–µ–π—á–∞—Å! üî•')


@commands_router.message(Command('nickname'))
async def cmd_nickname(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_nickname')
        await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è')
        await state.set_state(Rename.name)


@commands_router.message(Command('stats'))
async def cmd_stats(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, all_wallet, reg_day, name, all_pcs, max_bal FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_stats')
        refs = await conn.fetchval('SELECT COUNT(*) FROM stats WHERE ref = $1', message.from_user.id)
        date_time = str(user[2])
        reg_day = f'{date_time[8:10]}.{date_time[5:7]}.{date_time[0:4]}'
        await message.answer(f'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {user[3]}:\n\nüíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {user[1]}$\nüí∞ –ù–∞–∏–±–æ–ª—å—à–∏–π –±–∞–ª–∞–Ω—Å –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {user[5]}\nüñ•Ô∏è –ö—É–ø–ª–µ–Ω–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {user[4]}\nüë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {refs}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_day}')


@commands_router.message(Command('my_pcs'))
async def cmd_my_pcs(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_my_pcs')
        text = 'üñ• –≠—Ç–æ –≤–∞—à–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã:'
        for price in prices:
            pcs = await conn.fetch('SELECT income FROM pc WHERE userid = $1 AND lvl = $2', message.from_user.id, price[0])
            total_income = 0
            total_pcs = 0
            if len(pcs) > 0:
                for pc in pcs:
                    total_pcs += 1
                    total_income += Decimal(str(pc[0]))
                text = text + f'\n\n–ö–æ–º–ø—å—é—Ç–µ—Ä {price[0]} —É—Ä. {total_pcs} —à—Ç.\n–î–æ—Ö–æ–¥: {total_income}$. –ü—Ä–æ–¥–∞—Ç—å: /sell_{price[0]}'
        text += '\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –≤–≤–µ–¥–∏—Ç–µ:\n/sell_(—É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞*) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)'
        await message.answer(text)


@commands_router.message(Command('my_ad'))
async def cmd_my_ad(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_my_ad')
        user_ad = await conn.fetchrow('SELECT * FROM ads WHERE userid = $1 ORDER BY dt DESC LIMIT 1', message.from_user.id)
        if user_ad == None:
            await message.answer('‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ —Ä–µ–∫–ª–∞–º—É')
        else:
            for ad in ads:
                if user_ad[1] == ad[0] and user_ad[3] + datetime.timedelta(hours=ad[4]+ad[5]) < datetime.datetime.today():
                    await message.answer('‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã')
                elif user_ad[1] == ad[0] and user_ad[3] + datetime.timedelta(hours=ad[4]) < datetime.datetime.today():
                    await message.answer(f'‚è≥ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ {str(user_ad[3] + datetime.timedelta(hours=ad[4]+ad[5]))[:19]} –ø–æ –ú–°–ö, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ –±—Ä–∞–ª–∏ —Ä–µ–∫–ª–∞–º—É')
                elif user_ad[1] == ad[0]:
                    await message.answer(f'üì¢ –≠—Ç–æ –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞:\n\n{ad[1]} +{ad[3]}% –∫ –¥–æ—Ö–æ–¥—É\n–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {str(user_ad[3] + datetime.timedelta(hours=ad[4]+ad[5]))[:19]} –ø–æ –ú–°–ö')


@commands_router.message(Command('ref'))
async def cmd_ref(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_ref')
        refs = await conn.fetchval('SELECT COUNT(*) FROM stats WHERE ref = $1', message.from_user.id)
        await update_data(message.from_user.username, message.from_user.id)
        await message.answer(f'üë§ –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/PCClub_sBOT?start={message.from_user.id}\n\n'
                             '–û—Ç–ø—Ä–∞–≤–ª—è–π –µ—ë –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∑–∞–π–¥–µ—Ç –ø–æ –Ω–µ–π –≤ –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 2 —É—Ä–æ–≤–Ω—è –∫–æ–º–Ω–∞—Ç—ã\n\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs}\n\n'
                             '–ë–æ–Ω—É—Å –∑–∞ –∏–≥—Ä–æ–∫–∞: 12 —á–∞—Å–æ–≤ üëë PREMIUM üëë, –∞ —Ç–∞–∫–∂–µ 25% –æ—Ç –≤—Å–µ—Ö –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –¥–æ–Ω–∞—Ç–æ–≤\n'
                             '–ü–æ–∫–∞ –∏–¥–µ—Ç –∏–≤–µ–Ω—Ç, –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–∏–ª–µ—Ç-—É–¥–≤–æ–∏—Ç–µ–ª—å, —Å—Ä–∞–∑—É –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É', disable_web_page_preview=True)


@commands_router.message(Command('donate'))
async def cmd_donate(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_donate')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='1 –¥–µ–Ω—å PREMIUM', callback_data=f'donate_1day_{message.from_user.id}')],
            [InlineKeyboardButton(text='1 –Ω–µ–¥–µ–ª—è PREMIUM', callback_data=f'donate_1week_{message.from_user.id}')],
            [InlineKeyboardButton(text='1 –º–µ—Å—è—Ü PREMIUM', callback_data=f'donate_1month_{message.from_user.id}')],
            [InlineKeyboardButton(text='üßß –£–¥–≤–æ–∏—Ç–µ–ª–∏', callback_data=f'activate_ticket_{message.from_user.id}')]
        ])
        await message.answer('–ü–æ–∫—É–ø–∫–∞ üëë PREMIUM üëë\n\n'
                             'üåü –ë–æ–Ω—É—Å—ã:\n'
                             '+50% –∫ –¥–æ—Ö–æ–¥—É\n'
                             '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∏–∫–Ω–µ–π–º–µ\n'
                             '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ 2 —Ä–∞–∑–∞\n\n'
                             '–¶–µ–Ω–∞:\n1 –¥–µ–Ω—å - 20 —Ä—É–±.\n1 –Ω–µ–¥–µ–ª—è - 100 —Ä—É–±. (–í—ã–≥–æ–¥–Ω–µ–µ –Ω–∞ 30%!).\n1 –º–µ—Å—è—Ü - 300 —Ä—É–±. (–í—ã–≥–æ–¥–Ω–µ–µ –Ω–∞ 50%!)\n\n'
                             f'‚ùó –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]} ‚ùó', reply_markup=markup)


@commands_router.message(Command('chats'))
async def cmd_chats(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_messages')
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'new_message_{message.from_user.id}')],
            [InlineKeyboardButton(text='üì¨ –ß–∞—Ç—ã', callback_data=f'chats_num_1_{message.from_user.id}')]
        ])
        await message.answer(f'üì´ –°–æ–æ–±—â–µ–Ω–∏—è\n\n–û–±—â–∞–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –±–æ—Ç–∞.\n\n–ß–∞—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –±—É–¥–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –∏ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –±–æ—Ç–∞, —Å–æ–≤–µ—Ç—É–µ–º —É–∂–µ —Å–µ–π—á–∞—Å –æ–±—â–∞—Ç—å—Å—è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏–≤—ã–∫–Ω—É—Ç—å –∏ —Å—Ä–∞–∑—É –æ—Å–≤–∞–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=markup)
        

@commands_router.message(Command('top'))
async def cmd_top(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_top')
        bal = await conn.fetch('SELECT name, bal, userid FROM stats WHERE userid <> $1 ORDER BY bal DESC LIMIT 5', ADMIN[0])
        income = await conn.fetch('SELECT name, income, userid FROM stats WHERE userid <> $1 ORDER BY income DESC LIMIT 5', ADMIN[0])
        if message.from_user.id != ADMIN[0]:
            me_bal = await conn.fetchrow('WITH users_ranking AS (SELECT userid, name, bal, ROW_NUMBER() OVER (ORDER BY bal DESC) AS rank FROM stats WHERE userid <> $2) SELECT rank, bal, name, userid FROM users_ranking WHERE userid = $1', message.from_user.id, ADMIN[0])
            me_inc = await conn.fetchrow('WITH users_ranking AS (SELECT userid, name, income, ROW_NUMBER() OVER (ORDER BY income DESC) AS rank FROM stats WHERE userid <> $2) SELECT rank, income, name, userid FROM users_ranking WHERE userid = $1', message.from_user.id, ADMIN[0])
        text = ''
        num = 1
        text += 'üíµ –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É:'
        success = 0
        for user in bal:
            text += f'\n{num}) {user[0]} - {user[1]}$'
            num += 1
            if message.from_user.id != ADMIN[0] and user[2] == me_bal[3]:
                success = 1
        if success == 0 and message.from_user.id != ADMIN[0]:
            text += f'\n{me_bal[0]}) {me_bal[2]} - {me_bal[1]}'
        num = 1
        text += '\n\nüí∏ –¢–æ–ø 5 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É:'
        success = 0
        for user in income:
            text += f'\n{num}) {user[0]} - {user[1]}$ / 10 –º–∏–Ω.'
            num += 1
            if message.from_user.id != ADMIN[0] and user[2] == me_inc[3]:
                success = 1
        if success == 0 and message.from_user.id != ADMIN[0]:
            text += f'\n{me_inc[0]}) {me_inc[2]} - {me_inc[1]}'
        await message.answer(text)


@commands_router.message(Command('top_franchise'))
async def cmd_top_franchise(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_top_franchise')
        bal = await conn.fetch('SELECT name, income FROM networks WHERE owner_id != $1 ORDER BY income DESC LIMIT 10', ADMIN[0])
        text = ''
        num = 1
        text += 'üí∏ –¢–æ–ø 10 —Ñ—Ä–∞–Ω—à–∏–∑ –ø–æ –¥–æ—Ö–æ–¥—É –∑–∞ –Ω–µ–¥–µ–ª—é:'
        for user in bal:
            text += f'\n{num}) {user[0]} - {user[1]}$'
            num += 1
        text += '\n\n‚ùó –¢–æ–ø 5 –∏ 2 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–æ–ø 5 —Ñ—Ä–∞–Ω—à–∏–∑ –ø–æ–ª—É—á–∞—Ç PREMIUM –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –¥–æ—Ö–æ–¥–æ–≤ —Ñ—Ä–∞–Ω—à–∏–∑, –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤ 00:00 –ø–æ –ú–°–ö ‚ùó'
        await message.answer(text)


@commands_router.message(Command('promo'))
async def cmd_promo(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, income FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_promo')
        if message.text[6:] != '':
            promo = await conn.fetchrow('SELECT * FROM promos WHERE name = $1', message.text[7:])
            if promo != None:
                if not message.from_user.id in promo[3]:
                    if promo[1] < promo[2]:
                        reward = ''
                        if promo[4] == 'money':
                            reward = f'{promo[5]}$'
                            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! –í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward}')
                            await conn.execute('UPDATE stats SET bal = bal + $1 WHERE userid = $2', promo[5], message.from_user.id)
                        elif promo[4] == 'income':
                            await message.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥! –í—ã –ø–æ–ª—É—á–∏–ª–∏: {promo[5]*user[1]*6}$')
                            await conn.execute('UPDATE stats SET bal = bal + $1 WHERE userid = $2', promo[5]*user[1]*6, message.from_user.id)
                        await conn.execute('UPDATE promos SET use = $1, users = array_append(users, $2) WHERE name = $3', promo[1]+1, message.from_user.id, promo[0])
                    else:
                        await message.answer('‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∫–æ–Ω—á–∏–ª—Å—è')
                else:
                    await message.answer('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥')
            else:
                await message.answer('‚ö†Ô∏è –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            await message.answer('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n /promo (–ø—Ä–æ–∏–æ–∫–æ–¥)')


@commands_router.message(Command('profile'))
async def cmd_profile(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name, taxes, bonus, tickets FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_profile')
        stats = await conn.fetchrow('SELECT name, pc, room, bal, income, network, premium, title FROM stats WHERE userid = $1', message.from_user.id)
        bufs = await conn.fetchrow('SELECT upgrade_Internet, upgrade_devices, upgrade_interior, upgrade_minibar, upgrade_service FROM stats WHERE userid = $1', message.from_user.id)
        network = await conn.fetchrow('SELECT name FROM networks WHERE owner_id = $1', stats[5])
        user_ad = await conn.fetchrow('SELECT * FROM ads WHERE userid = $1 ORDER BY dt DESC LIMIT 1', message.from_user.id)
        text = ''
        income = Decimal(str(stats[4]))
        prem = 0
        if stats[6] > datetime.datetime.today():
            date_time = str(stats[6])
            text += f'üëë PREMIUM üëë –¥–æ {date_time[8:10]}.{date_time[5:7]}.{date_time[0:4]} {date_time[11:16]}\n'
            prem = income/2
        
        summ = 0
        ad_inc = 0

        for buf in bufs:
            summ += income/100*buf
        
        for ad in ads:
            if user_ad != None and user_ad[1] == ad[0] and user_ad[3] + datetime.timedelta(hours=ad[4]+ad[5]) > datetime.datetime.today():
                ad_inc = income/100*user_ad[2]

        income = income + prem + summ +ad_inc
        
        if stats[7] != None:
            text += f'{stats[7]}\n'
        text += f'–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ <a href="tg://user?id={message.from_user.id}">{stats[0]}</a>:\n'
        text += f'\nüñ• –ö–æ–º–ø—å—é—Ç–µ—Ä—ã: {stats[1]}/{stats[2]*5}\n‚è´ –£—Ä–æ–≤–µ–Ω—å –∫–æ–º–Ω–∞—Ç—ã: {stats[2]}\n'
        text += f'\nüíµ –ë–∞–ª–∞–Ω—Å: {stats[3]}$\nüí∏ –î–æ—Ö–æ–¥: {income}$ / 10 –º–∏–Ω.\nüí∞ –ß–∏—Å—Ç—ã–π –¥–æ—Ö–æ–¥: {stats[4]}$ / 10 –º–∏–Ω.\n'
        if user[3] > 0:
            text += f'\nüßß –£ –≤–∞—Å –µ—Å—Ç—å –±–∏–ª–µ—Ç—ã —É–¥–≤–æ–µ–Ω–∏—è: {user[3]}. –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /donate\n'
        if user[1] > taxes[stats[2]-1][1] / 3 * 2:
            text += f'\n‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–ª–æ–≥–æ–≤–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {user[1]}$\n–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏: /pay_taxes\n'
        if network != None:
            text += f'\nüåê –°–æ—Å—Ç–æ–∏—Ç –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ: {network[0]}\n'
        else:
            text += '\nüåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ñ—Ä–∞–Ω—à–∏–∑–µ\n'
        text += '\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º: /nickname\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞: /stats\n–†–µ—Ñ–µ—Ä–∞–ª—ã: /ref'
        if user[2] == 1:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å', callback_data=f'bonus_{message.from_user.id}')]
            ])
            await message.answer(text, reply_markup=markup, parse_mode='HTML')
        else:
            await message.answer(text, parse_mode='HTML')


@commands_router.message(Command('set_title'))
async def cmd_set_title(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_set_title')
        text = message.text.split(' ')
        if len(text) == 2:
            title = await conn.fetchrow('SELECT * FROM titles WHERE id = $1', text[1])
            if title != None:
                if message.from_user.id in title[1]:
                    await message.answer('üéñÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–∏—Ç—É–ª')
                    await conn.execute('UPDATE stats SET title = $1 WHERE userid = $2', title[0], message.from_user.id)
                else:
                    await message.answer('‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏—Ç—É–ª –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
            else:
                await message.answer('‚ùå –¢–∞–∫–æ–π —Ç–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
        else:
            await message.answer('‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /set_title (id —Ç–∏—Ç—É–ª–∞*)')


@commands_router.message(Command('titles'))
async def cmd_titles(message: Message):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_titles')
        titles = await conn.fetch('SELECT * FROM titles WHERE $1 = ANY(users)', message.from_user.id)
        text = 'üéñÔ∏è –≠—Ç–æ –≤–∞—à–∏ —Ç–∏—Ç—É–ª—ã:'
        for title in titles:
            text += f'\n{title[0]} ID: {title[2]}'
        text += '\n–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏—Ç—É–ª –≤–≤–µ–¥–∏—Ç–µ:\n/set_title (id —Ç–∏—Ç—É–ª–∞*)'
        await message.answer(text)


@commands_router.message(Command('cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    pool = await get_db_pool()
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT name FROM stats WHERE userid = $1', message.from_user.id)
        if user is None:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /start')
            return
        await update_data(message.from_user.username, message.from_user.id)
        await add_action(message.from_user.id, 'cmd_cancel')
        await state.clear()
        await message.answer('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')